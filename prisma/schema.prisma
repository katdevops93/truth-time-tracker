// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TimeEntry {
  id          String   @id @default(cuid())
  userId      String
  startTime   DateTime @default(now())
  endTime     DateTime?
  status      TimeEntryStatus @default(ACTIVE)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model DailyNote {
  id        String   @id @default(cuid())
  userId    String
  content   String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_notes")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  timeEntries TimeEntry[]
  dailyNotes  DailyNote[]
  meals       Meal[]

  @@map("users")
}

enum TimeEntryStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model Meal {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime @default(now())
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipes    Recipe[]

  @@map("meals")
}

model Recipe {
  id           String   @id @default(cuid())
  mealId       String
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  meal        Meal        @relation(fields: [mealId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]

  @@map("recipes")
}

model Ingredient {
  id       String @id @default(cuid())
  recipeId String
  name     String
  quantity String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}
